#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_CounterContract.headers.fc";
#include "tact_CounterContract.stdlib.fc";
#include "tact_CounterContract.constants.fc";
#include "tact_CounterContract.storage.fc";

;;
;; Contract CounterContract functions
;;

tuple $CounterContract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, slice) $CounterContract$_fun_contractAmount(tuple $self) impure inline_ref {
    var ($self) = $self;
    return ($self, $Int$_fun_toCoinsString(__tact_my_balance()));
}

;;
;; Receivers of a Contract CounterContract
;;

((tuple), ()) $CounterContract$_internal_binary_LoadBalanceContract(tuple $self, (int) $msg) impure inline {
    var $self = $self;
    var ($msg'amount) = $msg;
    __tact_debug_str(__gen_slice_string_14aa7c087aae2c8f6493422bb25bc9e904df2736bee011e4973b2adf95b1f8e4(), "[DEBUG] File contracts/counter_contract.tact:29:9");
    return ($self, ());
}

((tuple), ()) $CounterContract$_internal_binary_SendTonWithAddress(tuple $self, (int, slice) $msg) impure inline {
    var $self = $self;
    var ($msg'amountTon, $msg'takerAddress) = $msg;
    $global_send($SendParameters$_constructor_to_bounce_value_mode($msg'takerAddress, true, ($msg'amountTon + 400000), 2));
    return ($self, ());
}

((tuple), ()) $CounterContract$_internal_binary_SendTonToOurBalance(tuple $self, (int) $msg) impure inline {
    var $self = $self;
    var ($msg'amountTon) = $msg;
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__gen_slice_address_ad6ca21f706f0cf960c73517223e28759896805c10f7459ae87ec85d30cc4302(), true, ($msg'amountTon + 400000), 2));
    return ($self, ());
}

(tuple, ()) $CounterContract$_internal_text_a06a413c200b7d14864d279642043daec3a52ce21b28b1ffd176f6dbbd716941(tuple $self) impure inline {
    var $self = $self;
    $global_send($SendParameters$_constructor_to_bounce_value_mode(__gen_slice_address_ad6ca21f706f0cf960c73517223e28759896805c10f7459ae87ec85d30cc4302(), true, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 20000000), 66));
    return ($self, ());
}

((tuple), ()) $CounterContract$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$CounterContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract CounterContract
;;

_ %contractAmount() method_id(92441) {
    var self = $CounterContract$_contract_load();
    var res = self~$CounterContract$_fun_contractAmount();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmTGfcsU1juS68vozMTRmVPMNvLFXiTEtGTLfDu5apfFkc";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract CounterContract
;;

(tuple, int) $CounterContract$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive LoadBalanceContract message
    if (op == 1792196555) {
        var msg = in_msg~$LoadBalanceContract$_load();
        self~$CounterContract$_internal_binary_LoadBalanceContract(msg);
        return (self, true);
    }
    
    ;; Receive SendTonWithAddress message
    if (op == 25803036) {
        var msg = in_msg~$SendTonWithAddress$_load();
        self~$CounterContract$_internal_binary_SendTonWithAddress(msg);
        return (self, true);
    }
    
    ;; Receive SendTonToOurBalance message
    if (op == 3573853958) {
        var msg = in_msg~$SendTonToOurBalance$_load();
        self~$CounterContract$_internal_binary_SendTonToOurBalance(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$CounterContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdrawCommisionSafe" message
        if (text_op == 0xa06a413c200b7d14864d279642043daec3a52ce21b28b1ffd176f6dbbd716941) {
            self~$CounterContract$_internal_text_a06a413c200b7d14864d279642043daec3a52ce21b28b1ffd176f6dbbd716941();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $CounterContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$CounterContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $CounterContract$_contract_store(self);
}
