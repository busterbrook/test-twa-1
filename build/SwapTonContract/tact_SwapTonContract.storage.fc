;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Client
;; TLB: _ address:address amount:coins currency:^string = Client
;;

builder $Client$_store(builder build_0, (slice, int, slice) v) inline {
    var (v'address, v'amount, v'currency) = v;
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'currency).end_cell());
    return build_0;
}

(slice, ((slice, int, slice))) $Client$_load(slice sc_0) inline {
    var v'address = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'currency = sc_0~load_ref().begin_parse();
    return (sc_0, (v'address, v'amount, v'currency));
}

((slice, int, slice)) $Client$_constructor_address_amount_currency(slice address, int amount, slice currency) inline {
    return (address, amount, currency);
}

;;
;; Type: CreateOffer
;; Header: 0x10f24e71
;; TLB: create_offer#10f24e71 addressClient1:address amountTon:coins offerCurrency:^string = CreateOffer
;;

(slice, ((slice, int, slice))) $CreateOffer$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 284315249);
    var v'addressClient1 = sc_0~__tact_load_address();
    var v'amountTon = sc_0~load_coins();
    var v'offerCurrency = sc_0~load_ref().begin_parse();
    return (sc_0, (v'addressClient1, v'amountTon, v'offerCurrency));
}

;;
;; Type: Swap
;; Header: 0xbf5eb9ce
;; TLB: swap#bf5eb9ce addressClient2:address amountTon:coins swapCurrency:^string = Swap
;;

(slice, ((slice, int, slice))) $Swap$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3210656206);
    var v'addressClient2 = sc_0~__tact_load_address();
    var v'amountTon = sc_0~load_coins();
    var v'swapCurrency = sc_0~load_ref().begin_parse();
    return (sc_0, (v'addressClient2, v'amountTon, v'swapCurrency));
}

;;
;; Type: Claim
;; Header: 0x5f63c310
;; TLB: claim#5f63c310 secureCode:uint32 = Claim
;;

(slice, ((int))) $Claim$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1600373520);
    var v'secureCode = sc_0~load_uint(32);
    return (sc_0, (v'secureCode));
}

;;
;; Type: SwapTonContract
;;

builder $SwapTonContract$_store(builder build_0, (slice, (slice, int, slice), (slice, int, slice)) v) inline {
    var (v'deployer, (v'client1'address, v'client1'amount, v'client1'currency), (v'client2'address, v'client2'amount, v'client2'currency)) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = $Client$_store(build_0, (v'client1'address, v'client1'amount, v'client1'currency));
    var build_1 = begin_cell();
    build_1 = $Client$_store(build_1, (v'client2'address, v'client2'amount, v'client2'currency));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, (slice, int, slice), (slice, int, slice)))) $SwapTonContract$_load(slice sc_0) inline {
    var v'deployer = sc_0~__tact_load_address();
    var v'client1 = sc_0~$Client$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'client2 = sc_1~$Client$_load();
    return (sc_0, (v'deployer, v'client1, v'client2));
}

(slice, (slice, int, slice), (slice, int, slice)) $SwapTonContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SwapTonContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SwapTonContract$_contract_init();
    }
}

() $SwapTonContract$_contract_store((slice, (slice, int, slice), (slice, int, slice)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SwapTonContract$_store(b, v);
    set_data(b.end_cell());
}